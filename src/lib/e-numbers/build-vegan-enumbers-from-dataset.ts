// Build a fully-typed E-number dataset (names, type, EU status, vegan)
// Sources parsed at runtime:
//  - Wikipedia “E number” full tables: https://en.wikipedia.org/wiki/E_number
//  - Cross-checked categories with DermNet: https://dermnetnz.org/topics/food-additives-and-e-numbers
//  - Historic German list (Mohnhaupt, 2006) for some rare/letter-suffix entries as fallback
//
// How to run:
//   1) npm init -y && npm i node-fetch@3 cheerio@1
//   2) npx ts-node index.ts  (or compile with tsc)
//   3) This script writes ./veganENumbersFull.ts exporting the final array.

import fs from "node:fs";
import path from "node:path";
import * as cheerio from "cheerio";
import fetch from "node-fetch";

// enum ENumberArrayType {
//   COLOUR = "colour",
//   PRESERVATIVE = "preservative",
//   ANTIOXIDANT = "antioxidant",
//   SWEETENER = "sweetener",
//   EMULSIFIER = "emulsifier",
//   OTHER = "other",
// }

export const ENumberArrayType = {
  COLOUR: "colour",
  PRESERVATIVE: "preservative",
  ANTIOXIDANT: "antioxidant",
  SWEETENER: "sweetener",
  EMULSIFIER: "emulsifier",
  OTHER: "other",
} as const;
export type ENumberArrayType =
  (typeof ENumberArrayType)[keyof typeof ENumberArrayType];

type ENumberArrayItem = {
  code: string;
  type: ENumberArrayType;
  name: string;
  licensedInEU: boolean;
  vegan: boolean;
};

// === Paste your input list here (kept verbatim from your message) ===
const veganENumbers = [
  "E100",
  "E101a",
  "E102",
  "E103",
  "E104",
  "E105",
  "E106",
  "E107",
  "E110",
  "E111",
  "E121",
  "E122",
  "E123",
  "E124",
  "E125",
  "E126",
  "E127",
  "E128",
  "E129",
  "E130",
  "E131",
  "E132",
  "E133",
  "E140",
  "E141",
  "E142",
  "E143",
  "E150a",
  "E150b",
  "E150c",
  "E150d",
  "E151",
  "E152",
  "E154",
  "E155",
  "E160a",
  "E160b",
  "E160c",
  "E160d",
  "E160e",
  "E160f",
  "E161a",
  "E161b",
  "E161c",
  "E161d",
  "E161e",
  "E161f",
  "E162",
  "E163",
  "E170",
  "E171",
  "E172",
  "E173",
  "E174",
  "E175",
  "E180",
  "E181",
  "E200",
  "E201",
  "E202",
  "E203",
  "E210",
  "E211",
  "E212",
  "E213",
  "E214",
  "E215",
  "E216",
  "E217",
  "E218",
  "E219",
  "E220",
  "E221",
  "E222",
  "E223",
  "E224",
  "E225",
  "E226",
  "E227",
  "E228",
  "E230",
  "E231",
  "E232",
  "E233",
  "E234",
  "E235",
  "E236",
  "E237",
  "E238",
  "E239",
  "E240",
  "E242",
  "E249",
  "E250",
  "E251",
  "E260",
  "E261",
  "E262",
  "E263",
  "E264",
  "E280",
  "E281",
  "E282",
  "E283",
  "E284",
  "E285",
  "E290",
  "E296",
  "E297",
  "E300",
  "E301",
  "E302",
  "E303",
  "E304",
  "E306",
  "E307",
  "E307b",
  "E308",
  "E309",
  "E310",
  "E311",
  "E312",
  "E315",
  "E316",
  "E317",
  "E318",
  "E319",
  "E320",
  "E321",
  "E329",
  "E330",
  "E331",
  "E332",
  "E333",
  "E334",
  "E335",
  "E336",
  "E337",
  "E338",
  "E339",
  "E340",
  "E341",
  "E343",
  "E350",
  "E351",
  "E352",
  "E353",
  "E354",
  "E355",
  "E356",
  "E357",
  "E363",
  "E365",
  "E366",
  "E367",
  "E370",
  "E375",
  "E380",
  "E381",
  "E385",
  "E400",
  "E401",
  "E402",
  "E403",
  "E404",
  "E405",
  "E406",
  "E407",
  "E407a",
  "E410",
  "E412",
  "E413",
  "E414",
  "E415",
  "E416",
  "E417",
  "E418",
  "E420",
  "E421",
  "E425",
  "E440",
  "E444",
  "E445",
  "E450",
  "E451",
  "E452",
  "E459",
  "E460",
  "E461",
  "E462",
  "E463",
  "E464",
  "E465",
  "E466",
  "E468",
  "E469",
  "E500",
  "E501",
  "E503",
  "E504",
  "E507",
  "E508",
  "E509",
  "E510",
  "E511",
  "E512",
  "E513",
  "E517",
  "E518",
  "E519",
  "E520",
  "E521",
  "E522",
  "E523",
  "E524",
  "E525",
  "E526",
  "E527",
  "E528",
  "E529",
  "E530",
  "E535",
  "E536",
  "E538",
  "E540",
  "E541",
  "E543",
  "E544",
  "E545",
  "E550",
  "E551",
  "E552",
  "E553b",
  "E554",
  "E555",
  "E556",
  "E558",
  "E559",
  "E574",
  "E575",
  "E576",
  "E577",
  "E578",
  "E579",
  "E620",
  "E621",
  "E622",
  "E623",
  "E624",
  "E625",
  "E626",
  "E628",
  "E629",
  "E630",
  "E632",
  "E633",
  "E634",
  "E636",
  "E637",
  "E900",
  "E902",
  "E903",
  "E905",
  "E905a",
  "E905b",
  "E905c",
  "E906",
  "E907",
  "E908",
  "E912",
  "E914",
  "E915",
  "E922",
  "E923",
  "E924",
  "E925",
  "E926",
  "E927",
  "E297b",
  "E928",
  "E930",
  "E938",
  "E939",
  "E940",
  "E941",
  "E942",
  "E943a",
  "E943b",
  "E944",
  "E948",
  "E949",
  "E950",
  "E951",
  "E952",
  "E953",
  "E954",
  "E955",
  "E957",
  "E959",
  "E965",
  "E967",
  "E999",
  "E1103",
  "E1106",
  "E1107",
  "E1108",
  "E1109",
  "E1110",
  "E1111",
  "E1112",
  "E1113",
  "E1114",
  "E1115",
  "E1116",
  "E1117",
  "E1118",
  "E1119",
  "E1120",
  "E1121",
  "E1122",
  "E1123",
  "E1124",
  "E1125",
  "E1126",
  "E1127",
  "E1128",
  "E1129",
  "E1130",
  "E1131",
  "E1132",
  "E1133",
  "E1134",
  "E1135",
  "E1136",
  "E1137",
  "E1138",
  "E1139",
  "E1140",
  "E1141",
  "E1142",
  "E1143",
  "E1144",
  "E1145",
  "E1146",
  "E1147",
  "E1148",
  "E1149",
  "E1150",
  "E1151",
  "E1152",
  "E1153",
  "E1154",
  "E1155",
  "E1156",
  "E1157",
  "E1158",
  "E1159",
  "E1160",
  "E1161",
  "E1162",
  "E1163",
  "E1164",
  "E1165",
  "E1166",
  "E1167",
  "E1168",
  "E1169",
  "E1170",
  "E1171",
  "E1172",
  "E1173",
  "E1174",
  "E1175",
  "E1176",
  "E1177",
  "E1178",
  "E1179",
  "E1180",
  "E1181",
  "E1182",
  "E1183",
  "E1184",
  "E1185",
  "E1186",
  "E1187",
  "E1188",
  "E1189",
  "E1190",
  "E1191",
  "E1192",
  "E1193",
  "E1194",
  "E1195",
  "E1196",
  "E1197",
  "E1198",
  "E1199",
  "E1200",
  "E1201",
  "E1202",
  "E1400",
  "E1401",
  "E1402",
  "E1403",
  "E1404",
  "E1410",
  "E1412",
  "E1413",
  "E1414",
  "E1420",
  "E1421",
  "E1422",
  "E1430",
  "E1440",
  "E1441",
  "E1442",
  "E1450",
  "E1451",
  "E1505",
  "E1510",
  "E1518",
  "E1520",
];

// Small curated overrides for letter-suffix entries or places where Wikipedia tables are sparse.
// (Names pulled from Wikipedia/Mohnhaupt/Austrian ministry docs.)
const NAME_OVERRIDES: Record<string, string> = {
  E101a: "Riboflavin-5'-phosphate",
  E150a: "Plain caramel",
  E150b: "Caustic sulphite caramel",
  E150c: "Ammonia caramel",
  E150d: "Sulfite ammonia caramel",
  E160a: "Alpha-carotene/Beta-carotene (mixed carotenoids)",
  E160b: "Annatto, bixin, norbixin",
  E160c: "Paprika extract, capsanthin, capsorubin",
  E160d: "Lycopene",
  E160e: "Beta-apo-8'-carotenal",
  E160f: "Ethyl ester of beta-apo-8'-carotenic acid",
  E161a: "Flavoxanthin",
  E161b: "Lutein",
  E161c: "Cryptoxanthin",
  E161d: "Rubixanthin",
  E161e: "Violaxanthin",
  E161f: "Rhodoxanthin",
  E307b: "Conc. mixed tocopherols (beta, gamma)",
  E407a: "Processed eucheuma seaweed",
  E420: "Sorbitol",
  E421: "Mannitol",
  E440: "Pectins",
  E444: "Sucrose acetate isobutyrate",
  E445: "Glycerol esters of wood rosin",
  E450: "Diphosphates",
  E451: "Triphosphates",
  E452: "Polyphosphates",
  E459: "Beta-cyclodextrin",
  E460: "Cellulose",
  E461: "Methyl cellulose",
  E462: "Ethyl cellulose",
  E463: "Hydroxypropyl cellulose",
  E464: "Hydroxypropyl methylcellulose",
  E465: "Ethyl methylcellulose",
  E466: "Carboxymethyl cellulose (CMC)",
  E468: "Crosslinked CMC (CMC-Na)",
  E469: "Enzymatically hydrolysed CMC",
  E500: "Sodium carbonates",
  E501: "Potassium carbonates",
  E503: "Ammonium carbonates",
  E504: "Magnesium carbonates",
  E507: "Hydrochloric acid",
  E508: "Potassium chloride",
  E509: "Calcium chloride",
  E510: "Ammonium chloride",
  E511: "Magnesium chloride",
  E512: "Stannous chloride",
  E513: "Sulfuric acid",
  E517: "Ammonium sulfate",
  E518: "Magnesium sulfate",
  E519: "Copper sulfate",
  E520: "Aluminium sulfate",
  E521: "Aluminium sodium sulfate",
  E522: "Aluminium potassium sulfate",
  E523: "Aluminium ammonium sulfate",
  E524: "Sodium hydroxide",
  E525: "Potassium hydroxide",
  E526: "Calcium hydroxide",
  E527: "Ammonium hydroxide",
  E528: "Magnesium hydroxide",
  E529: "Calcium oxide",
  E530: "Magnesium oxide",
  E535: "Sodium ferrocyanide",
  E536: "Potassium ferrocyanide",
  E538: "Calcium ferrocyanide",
  E540: "Dicalcium diphosphite",
  E541: "Sodium aluminium phosphate",
  E543: "Calcium aluminium phosphate",
  E544: "Magnesium aluminium silicate",
  E545: "Ammonium aluminium silicate",
  E550: "Sodium silicates",
  E551: "Silicon dioxide",
  E552: "Calcium silicate",
  E553b: "Talc",
  E554: "Sodium aluminosilicate",
  E555: "Potassium aluminium silicate",
  E556: "Calcium aluminium silicate",
  E558: "Bentonite",
  E559: "Aluminium silicate",
  E574: "Gluconic acid",
  E575: "Glucono delta-lactone",
  E576: "Sodium gluconate",
  E577: "Potassium gluconate",
  E578: "Calcium gluconate",
  E579: "Iron(II) gluconate",
  E620: "Glutamic acid",
  E621: "Monosodium glutamate",
  E622: "Monopotassium glutamate",
  E623: "Monoammonium glutamate",
  E624: "Monocalcium glutamate",
  E625: "Magnesium diglutamate",
  E626: "Guanylic acid (5'-GMP)",
  E628: "Disodium guanylate",
  E629: "Dipotassium guanylate",
  E630: "Inosinic acid",
  E632: "Disodium inosinate",
  E633: "Dipotassium inosinate",
  E634: "Calcium 5'-ribonucleotides",
  E636: "Maltol",
  E637: "Ethyl maltol",
  E900: "Dimethylpolysiloxane (antifoam)",
  E902: "Candelilla wax",
  E903: "Carnauba wax",
  E905: "Microcrystalline wax",
  E905a: "Mineral oil (white oils)",
  E905b: "Petrolatum",
  E905c: "Paraffin wax",
  E906: "Shellac",
  E907: "Refined microcrystalline wax",
  E908: "Rice bran wax",
  E912: "Montan acid esters",
  E914: "Oxidised polyethylene wax",
  E915: "Glycerol ester of rosin",
  E922: "Potassium persulfate",
  E923: "Ammonium persulfate",
  E924: "Potassium bromate",
  E925: "Chlorine",
  E926: "Chlorine dioxide",
  E927: "Azodicarbonamide",
  E928: "Benzoyl peroxide",
  E930: "Calcium peroxide",
  E938: "Argon",
  E939: "Helium",
  E940: "Dichlorodifluoromethane (CFC-12)",
  E941: "Nitrogen",
  E942: "Nitrous oxide",
  E943a: "Butane",
  E943b: "Isobutane",
  E944: "Propane",
  E948: "Oxygen",
  E949: "Hydrogen",
  E950: "Acesulfame K",
  E951: "Aspartame",
  E952: "Cyclamates",
  E953: "Isomalt",
  E954: "Saccharin",
  E955: "Sucralose",
  E957: "Thaumatin",
  E959: "Neohesperidin dihydrochalcone",
  E965: "Maltitol",
  E967: "Xylitol",
  E999: "Quillaia extracts (foaming agent)",
};

function inferTypeFromCode(code: string): ENumberArrayType {
  const num = parseInt(code.match(/E(\d+)/i)?.[1] || "0", 10);
  if (num >= 100 && num < 200) return ENumberArrayType.COLOUR;
  if (num >= 200 && num < 300) return ENumberArrayType.PRESERVATIVE;
  if (num >= 300 && num < 400) return ENumberArrayType.ANTIOXIDANT; // includes acidity regulators
  if (num >= 400 && num < 500) return ENumberArrayType.EMULSIFIER; // includes thickeners/stabilisers
  if (num >= 950 && num <= 969) return ENumberArrayType.SWEETENER; // intense & bulk sweeteners
  if (num === 420 || num === 421 || num === 953 || num === 965 || num === 967)
    return ENumberArrayType.SWEETENER;
  return ENumberArrayType.OTHER;
}

function inferEUStatusFromRow(rowText: string): boolean {
  const txt = rowText.toLowerCase();
  if (/(not permitted|unpermitted|no longer allowed|banned)/.test(txt))
    return false;
  // Wikipedia sometimes leaves status blank; default to true if unknown
  return true;
}

async function scrapeWikiENumbers(): Promise<
  Record<string, { name: string; licensedInEU: boolean }>
> {
  const url = "https://en.wikipedia.org/wiki/E_number";
  const html = await (await fetch(url)).text();
  const $ = cheerio.load(html);
  const map: Record<string, { name: string; licensedInEU: boolean }> = {};

  $("table.wikitable").each((_, table) => {
    const $table = $(table);
    const headers = $table
      .find("th")
      .map((i, th) => $(th).text().trim().toLowerCase())
      .get();
    if (!headers[0]?.includes("e number")) return; // only full-list tables

    $table.find("tr").each((__, tr) => {
      const tds = $(tr).find("td");
      if (tds.length < 2) return;
      const codeCell = $(tds[0]).text().replace(/\s+/g, " ").trim();
      const nameCell = $(tds[1]).text().replace(/\s+/g, " ").trim();
      const rowText = $(tr).text();

      // Extract individual codes from cell (handles comma/semicolon separated entries)
      const codes = codeCell.match(/E\s*\d+[a-z]?/gi) || [];
      const eu = inferEUStatusFromRow(rowText);
      for (const c of codes) {
        const code = c.replace(/\s+/g, "").toUpperCase();
        if (!map[code]) map[code] = { name: nameCell || "", licensedInEU: eu };
      }
    });
  });

  // Apply overrides for better names where Wikipedia has families/ambiguous rows
  for (const [code, name] of Object.entries(NAME_OVERRIDES)) {
    if (!map[code]) map[code] = { name, licensedInEU: true };
    else map[code].name = name;
  }

  // Known EU ban (post-2022) for E171 (titanium dioxide)
  if (map["E171"]) map["E171"].licensedInEU = false;

  return map;
}

(async () => {
  const wikiMap = await scrapeWikiENumbers();

  const result: ENumberArrayItem[] = veganENumbers.map((code) => {
    const fromWiki = wikiMap[code];
    const name = NAME_OVERRIDES[code] || fromWiki?.name || "";
    // If Wikipedia didn’t have a specific lettered entry, try the base number (e.g., E101 for E101a)
    const base = code.replace(/[a-z]$/i, "");
    const fallbackName = name || wikiMap[base]?.name || "";
    const licensedInEU =
      code === "E171"
        ? false
        : fromWiki?.licensedInEU ?? wikiMap[base]?.licensedInEU ?? true;

    return {
      code,
      type: inferTypeFromCode(code),
      name: fallbackName,
      licensedInEU,
      vegan: true,
    };
  });

  const out =
    `// Auto-generated from Wikipedia E-number tables + curated overrides\n` +
    `// See: https://en.wikipedia.org/wiki/E_number\n` +
    `// EU ban for E171 per Commission (2022).\n` +
    `\nexport enum ENumberArrayType {\n  COLOUR = 'colour',\n  PRESERVATIVE = 'preservative',\n  ANTIOXIDANT = 'antioxidant',\n  SWEETENER = 'sweetener',\n  EMULSIFIER = 'emulsifier',\n  OTHER = 'other',\n}\n\nexport type ENumberArrayItem = {\n  code: string;\n  type: ENumberArrayType;\n  name: string;\n  licensedInEU: boolean;\n  vegan: boolean;\n};\n\nexport const veganENumbersFull: ENumberArrayItem[] = ${JSON.stringify(
      result,
      null,
      2
    )};\n`;

  fs.writeFileSync(
    path.resolve(process.cwd(), "veganENumbersFull.ts"),
    out,
    "utf8"
  );
  console.log(`Wrote ${result.length} items to veganENumbersFull.ts`);
})();
